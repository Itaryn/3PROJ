### YamlMime:ManagedReference
items:
- uid: KittyCoin.Models.KittyChain
  commentId: T:KittyCoin.Models.KittyChain
  id: KittyChain
  parent: KittyCoin.Models
  children:
  - KittyCoin.Models.KittyChain.#ctor
  - KittyCoin.Models.KittyChain.#ctor(System.Collections.Generic.List{KittyCoin.Models.Block},System.Collections.Generic.List{KittyCoin.Models.Transfer})
  - KittyCoin.Models.KittyChain.AddBlock(KittyCoin.Models.Block)
  - KittyCoin.Models.KittyChain.Biscuit
  - KittyCoin.Models.KittyChain.Chain
  - KittyCoin.Models.KittyChain.CheckDifficulty
  - KittyCoin.Models.KittyChain.CreateTransfer(KittyCoin.Models.Transfer)
  - KittyCoin.Models.KittyChain.Difficulty
  - KittyCoin.Models.KittyChain.Equals(System.Object)
  - KittyCoin.Models.KittyChain.FirstBlock
  - KittyCoin.Models.KittyChain.GetBalance(System.String)
  - KittyCoin.Models.KittyChain.GetBlockAt(System.Int32)
  - KittyCoin.Models.KittyChain.GetLastBlock(KittyCoin.Models.Block)
  - KittyCoin.Models.KittyChain.GetNextBlock(KittyCoin.Models.Block)
  - KittyCoin.Models.KittyChain.GetPreviousBlock(KittyCoin.Models.Block)
  - KittyCoin.Models.KittyChain.GetTransactions(System.String)
  - KittyCoin.Models.KittyChain.InitializeChain
  - KittyCoin.Models.KittyChain.IsValid
  - KittyCoin.Models.KittyChain.LastBlock
  - KittyCoin.Models.KittyChain.PendingTransfers
  - KittyCoin.Models.KittyChain.SaveBlockChain
  langs:
  - csharp
  - vb
  name: KittyChain
  nameWithType: KittyChain
  fullName: KittyCoin.Models.KittyChain
  type: Class
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: KittyChain
    path: Models/KittyChain.cs
    startLine: 13
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  summary: "\nThe blockchain class\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class KittyChain
    content.vb: >-
      <Serializable>

      Public Class KittyChain
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: KittyCoin.Models.KittyChain.PendingTransfers
  commentId: P:KittyCoin.Models.KittyChain.PendingTransfers
  id: PendingTransfers
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: PendingTransfers
  nameWithType: KittyChain.PendingTransfers
  fullName: KittyCoin.Models.KittyChain.PendingTransfers
  type: Property
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: PendingTransfers
    path: Models/KittyChain.cs
    startLine: 21
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  summary: "\nList of transfers that is pending the block to be created\n"
  example: []
  syntax:
    content: public List<Transfer> PendingTransfers { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{KittyCoin.Models.Transfer}
    content.vb: Public Property PendingTransfers As List(Of Transfer)
  overload: KittyCoin.Models.KittyChain.PendingTransfers*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.Chain
  commentId: P:KittyCoin.Models.KittyChain.Chain
  id: Chain
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: Chain
  nameWithType: KittyChain.Chain
  fullName: KittyCoin.Models.KittyChain.Chain
  type: Property
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: Chain
    path: Models/KittyChain.cs
    startLine: 26
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  summary: "\nList of the blocks in the chain\n"
  example: []
  syntax:
    content: public List<Block> Chain { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{KittyCoin.Models.Block}
    content.vb: Public Property Chain As List(Of Block)
  overload: KittyCoin.Models.KittyChain.Chain*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.Difficulty
  commentId: P:KittyCoin.Models.KittyChain.Difficulty
  id: Difficulty
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: Difficulty
  nameWithType: KittyChain.Difficulty
  fullName: KittyCoin.Models.KittyChain.Difficulty
  type: Property
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: Difficulty
    path: Models/KittyChain.cs
    startLine: 32
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  summary: "\nActual difficulty of the blockchain\nDepending of the average creation time of a block\n"
  example: []
  syntax:
    content: public string Difficulty { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Difficulty As String
  overload: KittyCoin.Models.KittyChain.Difficulty*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.Biscuit
  commentId: P:KittyCoin.Models.KittyChain.Biscuit
  id: Biscuit
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: Biscuit
  nameWithType: KittyChain.Biscuit
  fullName: KittyCoin.Models.KittyChain.Biscuit
  type: Property
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: Biscuit
    path: Models/KittyChain.cs
    startLine: 37
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  summary: "\nNumbler of KittyCoin given to the creator of a block\n"
  example: []
  syntax:
    content: public double Biscuit { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property Biscuit As Double
  overload: KittyCoin.Models.KittyChain.Biscuit*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.FirstBlock
  commentId: P:KittyCoin.Models.KittyChain.FirstBlock
  id: FirstBlock
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: FirstBlock
  nameWithType: KittyChain.FirstBlock
  fullName: KittyCoin.Models.KittyChain.FirstBlock
  type: Property
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: FirstBlock
    path: Models/KittyChain.cs
    startLine: 39
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  syntax:
    content: public Block FirstBlock { get; }
    parameters: []
    return:
      type: KittyCoin.Models.Block
    content.vb: Public ReadOnly Property FirstBlock As Block
  overload: KittyCoin.Models.KittyChain.FirstBlock*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: KittyCoin.Models.KittyChain.LastBlock
  commentId: P:KittyCoin.Models.KittyChain.LastBlock
  id: LastBlock
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: LastBlock
  nameWithType: KittyChain.LastBlock
  fullName: KittyCoin.Models.KittyChain.LastBlock
  type: Property
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: LastBlock
    path: Models/KittyChain.cs
    startLine: 41
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  syntax:
    content: public Block LastBlock { get; }
    parameters: []
    return:
      type: KittyCoin.Models.Block
    content.vb: Public ReadOnly Property LastBlock As Block
  overload: KittyCoin.Models.KittyChain.LastBlock*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: KittyCoin.Models.KittyChain.#ctor
  commentId: M:KittyCoin.Models.KittyChain.#ctor
  id: '#ctor'
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: KittyChain()
  nameWithType: KittyChain.KittyChain()
  fullName: KittyCoin.Models.KittyChain.KittyChain()
  type: Constructor
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: .ctor
    path: Models/KittyChain.cs
    startLine: 50
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  summary: "\nEmpty constructor to deserialize with NewtonSoft\n"
  example: []
  syntax:
    content: public KittyChain()
    content.vb: Public Sub New
  overload: KittyCoin.Models.KittyChain.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.#ctor(System.Collections.Generic.List{KittyCoin.Models.Block},System.Collections.Generic.List{KittyCoin.Models.Transfer})
  commentId: M:KittyCoin.Models.KittyChain.#ctor(System.Collections.Generic.List{KittyCoin.Models.Block},System.Collections.Generic.List{KittyCoin.Models.Transfer})
  id: '#ctor(System.Collections.Generic.List{KittyCoin.Models.Block},System.Collections.Generic.List{KittyCoin.Models.Transfer})'
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: KittyChain(List<Block>, List<Transfer>)
  nameWithType: KittyChain.KittyChain(List<Block>, List<Transfer>)
  fullName: KittyCoin.Models.KittyChain.KittyChain(System.Collections.Generic.List<KittyCoin.Models.Block>, System.Collections.Generic.List<KittyCoin.Models.Transfer>)
  type: Constructor
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: .ctor
    path: Models/KittyChain.cs
    startLine: 57
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  summary: "\nConstructor who can initialized or get a chain/pendingTransfers in parameter\n"
  example: []
  syntax:
    content: public KittyChain(List<Block> chain, List<Transfer> pendingTransfers)
    parameters:
    - id: chain
      type: System.Collections.Generic.List{KittyCoin.Models.Block}
      description: ''
    - id: pendingTransfers
      type: System.Collections.Generic.List{KittyCoin.Models.Transfer}
      description: ''
    content.vb: Public Sub New(chain As List(Of Block), pendingTransfers As List(Of Transfer))
  overload: KittyCoin.Models.KittyChain.#ctor*
  nameWithType.vb: KittyChain.KittyChain(List(Of Block), List(Of Transfer))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: KittyCoin.Models.KittyChain.KittyChain(System.Collections.Generic.List(Of KittyCoin.Models.Block), System.Collections.Generic.List(Of KittyCoin.Models.Transfer))
  name.vb: KittyChain(List(Of Block), List(Of Transfer))
- uid: KittyCoin.Models.KittyChain.GetLastBlock(KittyCoin.Models.Block)
  commentId: M:KittyCoin.Models.KittyChain.GetLastBlock(KittyCoin.Models.Block)
  id: GetLastBlock(KittyCoin.Models.Block)
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: GetLastBlock(Block)
  nameWithType: KittyChain.GetLastBlock(Block)
  fullName: KittyCoin.Models.KittyChain.GetLastBlock(KittyCoin.Models.Block)
  type: Method
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: GetLastBlock
    path: Models/KittyChain.cs
    startLine: 74
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  syntax:
    content: public Block GetLastBlock(Block block)
    parameters:
    - id: block
      type: KittyCoin.Models.Block
    return:
      type: KittyCoin.Models.Block
    content.vb: Public Function GetLastBlock(block As Block) As Block
  overload: KittyCoin.Models.KittyChain.GetLastBlock*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.GetNextBlock(KittyCoin.Models.Block)
  commentId: M:KittyCoin.Models.KittyChain.GetNextBlock(KittyCoin.Models.Block)
  id: GetNextBlock(KittyCoin.Models.Block)
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: GetNextBlock(Block)
  nameWithType: KittyChain.GetNextBlock(Block)
  fullName: KittyCoin.Models.KittyChain.GetNextBlock(KittyCoin.Models.Block)
  type: Method
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: GetNextBlock
    path: Models/KittyChain.cs
    startLine: 84
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  syntax:
    content: public Block GetNextBlock(Block block)
    parameters:
    - id: block
      type: KittyCoin.Models.Block
    return:
      type: KittyCoin.Models.Block
    content.vb: Public Function GetNextBlock(block As Block) As Block
  overload: KittyCoin.Models.KittyChain.GetNextBlock*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.GetPreviousBlock(KittyCoin.Models.Block)
  commentId: M:KittyCoin.Models.KittyChain.GetPreviousBlock(KittyCoin.Models.Block)
  id: GetPreviousBlock(KittyCoin.Models.Block)
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: GetPreviousBlock(Block)
  nameWithType: KittyChain.GetPreviousBlock(Block)
  fullName: KittyCoin.Models.KittyChain.GetPreviousBlock(KittyCoin.Models.Block)
  type: Method
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: GetPreviousBlock
    path: Models/KittyChain.cs
    startLine: 89
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  syntax:
    content: public Block GetPreviousBlock(Block block)
    parameters:
    - id: block
      type: KittyCoin.Models.Block
    return:
      type: KittyCoin.Models.Block
    content.vb: Public Function GetPreviousBlock(block As Block) As Block
  overload: KittyCoin.Models.KittyChain.GetPreviousBlock*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.GetBlockAt(System.Int32)
  commentId: M:KittyCoin.Models.KittyChain.GetBlockAt(System.Int32)
  id: GetBlockAt(System.Int32)
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: GetBlockAt(Int32)
  nameWithType: KittyChain.GetBlockAt(Int32)
  fullName: KittyCoin.Models.KittyChain.GetBlockAt(System.Int32)
  type: Method
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: GetBlockAt
    path: Models/KittyChain.cs
    startLine: 94
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  syntax:
    content: public Block GetBlockAt(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: KittyCoin.Models.Block
    content.vb: Public Function GetBlockAt(id As Integer) As Block
  overload: KittyCoin.Models.KittyChain.GetBlockAt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.InitializeChain
  commentId: M:KittyCoin.Models.KittyChain.InitializeChain
  id: InitializeChain
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: InitializeChain()
  nameWithType: KittyChain.InitializeChain()
  fullName: KittyCoin.Models.KittyChain.InitializeChain()
  type: Method
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: InitializeChain
    path: Models/KittyChain.cs
    startLine: 113
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  summary: "\nInitialize a new blockchain\n"
  example: []
  syntax:
    content: public void InitializeChain()
    content.vb: Public Sub InitializeChain
  overload: KittyCoin.Models.KittyChain.InitializeChain*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.CreateTransfer(KittyCoin.Models.Transfer)
  commentId: M:KittyCoin.Models.KittyChain.CreateTransfer(KittyCoin.Models.Transfer)
  id: CreateTransfer(KittyCoin.Models.Transfer)
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: CreateTransfer(Transfer)
  nameWithType: KittyChain.CreateTransfer(Transfer)
  fullName: KittyCoin.Models.KittyChain.CreateTransfer(KittyCoin.Models.Transfer)
  type: Method
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: CreateTransfer
    path: Models/KittyChain.cs
    startLine: 132
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  summary: "\nCreate a new transfer and add it to the pending list\n"
  example: []
  syntax:
    content: public string CreateTransfer(Transfer transfer)
    parameters:
    - id: transfer
      type: KittyCoin.Models.Transfer
      description: ''
    return:
      type: System.String
    content.vb: Public Function CreateTransfer(transfer As Transfer) As String
  overload: KittyCoin.Models.KittyChain.CreateTransfer*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.AddBlock(KittyCoin.Models.Block)
  commentId: M:KittyCoin.Models.KittyChain.AddBlock(KittyCoin.Models.Block)
  id: AddBlock(KittyCoin.Models.Block)
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: AddBlock(Block)
  nameWithType: KittyChain.AddBlock(Block)
  fullName: KittyCoin.Models.KittyChain.AddBlock(KittyCoin.Models.Block)
  type: Method
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: AddBlock
    path: Models/KittyChain.cs
    startLine: 157
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  summary: "\nAdd the created block to the blockchain\nCreate the transfer to give the biscuit to the creator of the block\n"
  example: []
  syntax:
    content: public string AddBlock(Block block)
    parameters:
    - id: block
      type: KittyCoin.Models.Block
      description: ''
    return:
      type: System.String
    content.vb: Public Function AddBlock(block As Block) As String
  overload: KittyCoin.Models.KittyChain.AddBlock*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.IsValid
  commentId: M:KittyCoin.Models.KittyChain.IsValid
  id: IsValid
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: IsValid()
  nameWithType: KittyChain.IsValid()
  fullName: KittyCoin.Models.KittyChain.IsValid()
  type: Method
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: IsValid
    path: Models/KittyChain.cs
    startLine: 185
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  summary: "\nCheck the validatity of the blockchain\n"
  example: []
  syntax:
    content: public bool IsValid()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsValid As Boolean
  overload: KittyCoin.Models.KittyChain.IsValid*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.GetBalance(System.String)
  commentId: M:KittyCoin.Models.KittyChain.GetBalance(System.String)
  id: GetBalance(System.String)
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: GetBalance(String)
  nameWithType: KittyChain.GetBalance(String)
  fullName: KittyCoin.Models.KittyChain.GetBalance(System.String)
  type: Method
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: GetBalance
    path: Models/KittyChain.cs
    startLine: 235
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  summary: "\nGet the balance of an address\n"
  example: []
  syntax:
    content: public double GetBalance(string address)
    parameters:
    - id: address
      type: System.String
      description: ''
    return:
      type: System.Double
      description: ''
    content.vb: Public Function GetBalance(address As String) As Double
  overload: KittyCoin.Models.KittyChain.GetBalance*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.GetTransactions(System.String)
  commentId: M:KittyCoin.Models.KittyChain.GetTransactions(System.String)
  id: GetTransactions(System.String)
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: GetTransactions(String)
  nameWithType: KittyChain.GetTransactions(String)
  fullName: KittyCoin.Models.KittyChain.GetTransactions(System.String)
  type: Method
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: GetTransactions
    path: Models/KittyChain.cs
    startLine: 269
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  summary: "\nGet all transactions of an address\n"
  example: []
  syntax:
    content: public List<Transfer> GetTransactions(string address)
    parameters:
    - id: address
      type: System.String
      description: ''
    return:
      type: System.Collections.Generic.List{KittyCoin.Models.Transfer}
      description: ''
    content.vb: Public Function GetTransactions(address As String) As List(Of Transfer)
  overload: KittyCoin.Models.KittyChain.GetTransactions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.CheckDifficulty
  commentId: M:KittyCoin.Models.KittyChain.CheckDifficulty
  id: CheckDifficulty
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: CheckDifficulty()
  nameWithType: KittyChain.CheckDifficulty()
  fullName: KittyCoin.Models.KittyChain.CheckDifficulty()
  type: Method
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: CheckDifficulty
    path: Models/KittyChain.cs
    startLine: 295
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  syntax:
    content: public string CheckDifficulty()
    return:
      type: System.String
    content.vb: Public Function CheckDifficulty As String
  overload: KittyCoin.Models.KittyChain.CheckDifficulty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.SaveBlockChain
  commentId: M:KittyCoin.Models.KittyChain.SaveBlockChain
  id: SaveBlockChain
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: SaveBlockChain()
  nameWithType: KittyChain.SaveBlockChain()
  fullName: KittyCoin.Models.KittyChain.SaveBlockChain()
  type: Method
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: SaveBlockChain
    path: Models/KittyChain.cs
    startLine: 313
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  syntax:
    content: public void SaveBlockChain()
    content.vb: Public Sub SaveBlockChain
  overload: KittyCoin.Models.KittyChain.SaveBlockChain*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: KittyCoin.Models.KittyChain.Equals(System.Object)
  commentId: M:KittyCoin.Models.KittyChain.Equals(System.Object)
  id: Equals(System.Object)
  parent: KittyCoin.Models.KittyChain
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: KittyChain.Equals(Object)
  fullName: KittyCoin.Models.KittyChain.Equals(System.Object)
  type: Method
  source:
    remote:
      path: KittyCoin/Models/KittyChain.cs
      branch: master
      repo: https://gitlab.com/Itaryn/kittycoins.git
    id: Equals
    path: Models/KittyChain.cs
    startLine: 326
  assemblies:
  - KittyCoin
  namespace: KittyCoin.Models
  summary: "\nCompare 2 blockchain\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The compared blockchain
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: KittyCoin.Models.KittyChain.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: KittyCoin.Models
  commentId: N:KittyCoin.Models
  name: KittyCoin.Models
  nameWithType: KittyCoin.Models
  fullName: KittyCoin.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: KittyCoin.Models.KittyChain.PendingTransfers*
  commentId: Overload:KittyCoin.Models.KittyChain.PendingTransfers
  name: PendingTransfers
  nameWithType: KittyChain.PendingTransfers
  fullName: KittyCoin.Models.KittyChain.PendingTransfers
- uid: System.Collections.Generic.List{KittyCoin.Models.Transfer}
  commentId: T:System.Collections.Generic.List{KittyCoin.Models.Transfer}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Transfer>
  nameWithType: List<Transfer>
  fullName: System.Collections.Generic.List<KittyCoin.Models.Transfer>
  nameWithType.vb: List(Of Transfer)
  fullName.vb: System.Collections.Generic.List(Of KittyCoin.Models.Transfer)
  name.vb: List(Of Transfer)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KittyCoin.Models.Transfer
    name: Transfer
    nameWithType: Transfer
    fullName: KittyCoin.Models.Transfer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KittyCoin.Models.Transfer
    name: Transfer
    nameWithType: Transfer
    fullName: KittyCoin.Models.Transfer
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: KittyCoin.Models.KittyChain.Chain*
  commentId: Overload:KittyCoin.Models.KittyChain.Chain
  name: Chain
  nameWithType: KittyChain.Chain
  fullName: KittyCoin.Models.KittyChain.Chain
- uid: System.Collections.Generic.List{KittyCoin.Models.Block}
  commentId: T:System.Collections.Generic.List{KittyCoin.Models.Block}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Block>
  nameWithType: List<Block>
  fullName: System.Collections.Generic.List<KittyCoin.Models.Block>
  nameWithType.vb: List(Of Block)
  fullName.vb: System.Collections.Generic.List(Of KittyCoin.Models.Block)
  name.vb: List(Of Block)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KittyCoin.Models.Block
    name: Block
    nameWithType: Block
    fullName: KittyCoin.Models.Block
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KittyCoin.Models.Block
    name: Block
    nameWithType: Block
    fullName: KittyCoin.Models.Block
  - name: )
    nameWithType: )
    fullName: )
- uid: KittyCoin.Models.KittyChain.Difficulty*
  commentId: Overload:KittyCoin.Models.KittyChain.Difficulty
  name: Difficulty
  nameWithType: KittyChain.Difficulty
  fullName: KittyCoin.Models.KittyChain.Difficulty
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: KittyCoin.Models.KittyChain.Biscuit*
  commentId: Overload:KittyCoin.Models.KittyChain.Biscuit
  name: Biscuit
  nameWithType: KittyChain.Biscuit
  fullName: KittyCoin.Models.KittyChain.Biscuit
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: KittyCoin.Models.KittyChain.FirstBlock*
  commentId: Overload:KittyCoin.Models.KittyChain.FirstBlock
  name: FirstBlock
  nameWithType: KittyChain.FirstBlock
  fullName: KittyCoin.Models.KittyChain.FirstBlock
- uid: KittyCoin.Models.Block
  commentId: T:KittyCoin.Models.Block
  parent: KittyCoin.Models
  name: Block
  nameWithType: Block
  fullName: KittyCoin.Models.Block
- uid: KittyCoin.Models.KittyChain.LastBlock*
  commentId: Overload:KittyCoin.Models.KittyChain.LastBlock
  name: LastBlock
  nameWithType: KittyChain.LastBlock
  fullName: KittyCoin.Models.KittyChain.LastBlock
- uid: KittyCoin.Models.KittyChain.#ctor*
  commentId: Overload:KittyCoin.Models.KittyChain.#ctor
  name: KittyChain
  nameWithType: KittyChain.KittyChain
  fullName: KittyCoin.Models.KittyChain.KittyChain
- uid: KittyCoin.Models.KittyChain.GetLastBlock*
  commentId: Overload:KittyCoin.Models.KittyChain.GetLastBlock
  name: GetLastBlock
  nameWithType: KittyChain.GetLastBlock
  fullName: KittyCoin.Models.KittyChain.GetLastBlock
- uid: KittyCoin.Models.KittyChain.GetNextBlock*
  commentId: Overload:KittyCoin.Models.KittyChain.GetNextBlock
  name: GetNextBlock
  nameWithType: KittyChain.GetNextBlock
  fullName: KittyCoin.Models.KittyChain.GetNextBlock
- uid: KittyCoin.Models.KittyChain.GetPreviousBlock*
  commentId: Overload:KittyCoin.Models.KittyChain.GetPreviousBlock
  name: GetPreviousBlock
  nameWithType: KittyChain.GetPreviousBlock
  fullName: KittyCoin.Models.KittyChain.GetPreviousBlock
- uid: KittyCoin.Models.KittyChain.GetBlockAt*
  commentId: Overload:KittyCoin.Models.KittyChain.GetBlockAt
  name: GetBlockAt
  nameWithType: KittyChain.GetBlockAt
  fullName: KittyCoin.Models.KittyChain.GetBlockAt
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: KittyCoin.Models.KittyChain.InitializeChain*
  commentId: Overload:KittyCoin.Models.KittyChain.InitializeChain
  name: InitializeChain
  nameWithType: KittyChain.InitializeChain
  fullName: KittyCoin.Models.KittyChain.InitializeChain
- uid: KittyCoin.Models.KittyChain.CreateTransfer*
  commentId: Overload:KittyCoin.Models.KittyChain.CreateTransfer
  name: CreateTransfer
  nameWithType: KittyChain.CreateTransfer
  fullName: KittyCoin.Models.KittyChain.CreateTransfer
- uid: KittyCoin.Models.Transfer
  commentId: T:KittyCoin.Models.Transfer
  parent: KittyCoin.Models
  name: Transfer
  nameWithType: Transfer
  fullName: KittyCoin.Models.Transfer
- uid: KittyCoin.Models.KittyChain.AddBlock*
  commentId: Overload:KittyCoin.Models.KittyChain.AddBlock
  name: AddBlock
  nameWithType: KittyChain.AddBlock
  fullName: KittyCoin.Models.KittyChain.AddBlock
- uid: KittyCoin.Models.KittyChain.IsValid*
  commentId: Overload:KittyCoin.Models.KittyChain.IsValid
  name: IsValid
  nameWithType: KittyChain.IsValid
  fullName: KittyCoin.Models.KittyChain.IsValid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: KittyCoin.Models.KittyChain.GetBalance*
  commentId: Overload:KittyCoin.Models.KittyChain.GetBalance
  name: GetBalance
  nameWithType: KittyChain.GetBalance
  fullName: KittyCoin.Models.KittyChain.GetBalance
- uid: KittyCoin.Models.KittyChain.GetTransactions*
  commentId: Overload:KittyCoin.Models.KittyChain.GetTransactions
  name: GetTransactions
  nameWithType: KittyChain.GetTransactions
  fullName: KittyCoin.Models.KittyChain.GetTransactions
- uid: KittyCoin.Models.KittyChain.CheckDifficulty*
  commentId: Overload:KittyCoin.Models.KittyChain.CheckDifficulty
  name: CheckDifficulty
  nameWithType: KittyChain.CheckDifficulty
  fullName: KittyCoin.Models.KittyChain.CheckDifficulty
- uid: KittyCoin.Models.KittyChain.SaveBlockChain*
  commentId: Overload:KittyCoin.Models.KittyChain.SaveBlockChain
  name: SaveBlockChain
  nameWithType: KittyChain.SaveBlockChain
  fullName: KittyCoin.Models.KittyChain.SaveBlockChain
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: KittyCoin.Models.KittyChain.Equals*
  commentId: Overload:KittyCoin.Models.KittyChain.Equals
  name: Equals
  nameWithType: KittyChain.Equals
  fullName: KittyCoin.Models.KittyChain.Equals
